{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/filterTodos.ts","utils/warningTimer.ts","components/TodoModal/TodoModal.tsx","utils/filteredTodos.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","text","status","initialState","query","filterReducer","value","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","isHasSelected","id","title","completed","className","classNames","onClick","todoActions","TodoList","visibleTodos","length","map","TodoFilter","setQuery","onSubmit","event","preventDefault","onChange","newStatus","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterTodos","warningTimer","callback","TodoModal","setHasError","useState","isLoading","setIsLoading","user","setUser","useEffect","a","userId","userData","href","email","name","App","hasError","useMemo","isFilteredQuery","toLowerCase","includes","toLocaleLowerCase","ACTIVE","COMPLETED","filteredTodos","todosData","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f92ac22b.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\n\nconst setQuery = (text: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: text,\n});\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: Status,\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET', payload: Todo[] };\ntype AddAction = { type: 'todos/ADD', payload: Todo };\ntype RemoveAction = { type: 'todos/REMOVE', payload : Todo };\n\ntype Action = SetAction | AddAction | RemoveAction;\ntype State = Todo[] | [];\n\nconst setTodos = (value: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: value,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const isHasSelected = currentTodo?.id === todo.id;\n  const { id, title, completed } = todo;\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(todoActions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': !isHasSelected,\n                'fa-eye-slash': isHasSelected,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  visibleTodos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ visibleTodos }) => {\n  return (\n    <>\n      {!visibleTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => (\n            <TodoItem todo={todo} key={todo.id} />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const dispatch = useAppDispatch();\n\n  const setQuery = (text: string) => dispatch(actions.setQuery(text));\n  const setStatus = (newStatus: Status) => (\n    dispatch(actions.setStatus(newStatus))\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={status}\n            data-cy=\"statusSelect\"\n            onChange={event => setStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={event => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                aria-label=\"clearButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setQuery('')}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterTodos {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","export const warningTimer = <T>(\n  callback: (value: T) => void,\n  value: T,\n  delay: number,\n) => {\n  setTimeout(() => {\n    callback(value);\n  }, delay);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { warningTimer } from '../../utils/warningTimer';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  currentTodo: Todo;\n  setHasError: (value: string) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo, setHasError }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        const userData = await getUser(currentTodo.userId);\n\n        setUser(userData);\n      } catch (error) {\n        setHasError(`${error}`);\n        warningTimer(setHasError, '', 3000);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(todoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo.completed\n                  ? <strong className=\"has-text-danger\">Planned</strong>\n                  : <strong className=\"has-text-success\">Done</strong>}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\nimport { FilterTodos } from '../types/filterTodos';\n\nexport const filteredTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  return todos.filter(({ completed, title }) => {\n    const isFilteredQuery = !query\n      || title.toLowerCase().includes(query.toLocaleLowerCase());\n\n    switch (status) {\n      case FilterTodos.ACTIVE:\n        return !completed && isFilteredQuery;\n      case FilterTodos.COMPLETED:\n        return completed && isFilteredQuery;\n      default:\n        return true && isFilteredQuery;\n    }\n  });\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\nimport { filteredTodos } from './utils/filteredTodos';\nimport { warningTimer } from './utils/warningTimer';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState('');\n\n  const visibleTodos = useMemo(() => (\n    filteredTodos(todos, query, status)\n  ), [todos, query, status]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        const todosData = await getTodos();\n\n        dispatch(todoActions.setTodos(todosData));\n      } catch (error) {\n        setHasError(`${error}`);\n        warningTimer(setHasError, '', 3000);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {hasError && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"PostsLoadingError\"\n              >\n                {hasError}\n              </div>\n            )}\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList visibleTodos={visibleTodos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} setHasError={setHasError} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}